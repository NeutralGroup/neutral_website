/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
goog.exportSymbol('proto.neutralservice.AccountInfo', null, global);
goog.exportSymbol('proto.neutralservice.AccountRequest', null, global);
goog.exportSymbol('proto.neutralservice.Accounts', null, global);
goog.exportSymbol('proto.neutralservice.SignedAccountRequest', null, global);
goog.exportSymbol('proto.neutralservice.UserAccountInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neutralservice.UserAccountInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neutralservice.UserAccountInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neutralservice.UserAccountInfo.displayName = 'proto.neutralservice.UserAccountInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neutralservice.AccountRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neutralservice.AccountRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neutralservice.AccountRequest.displayName = 'proto.neutralservice.AccountRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neutralservice.SignedAccountRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neutralservice.SignedAccountRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neutralservice.SignedAccountRequest.displayName = 'proto.neutralservice.SignedAccountRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neutralservice.AccountInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neutralservice.AccountInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neutralservice.AccountInfo.displayName = 'proto.neutralservice.AccountInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neutralservice.Accounts = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neutralservice.Accounts, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neutralservice.Accounts.displayName = 'proto.neutralservice.Accounts';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neutralservice.UserAccountInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.neutralservice.UserAccountInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neutralservice.UserAccountInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neutralservice.UserAccountInfo.toObject = function(includeInstance, msg) {
  var obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tier: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neutralservice.UserAccountInfo}
 */
proto.neutralservice.UserAccountInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neutralservice.UserAccountInfo;
  return proto.neutralservice.UserAccountInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neutralservice.UserAccountInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neutralservice.UserAccountInfo}
 */
proto.neutralservice.UserAccountInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTier(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neutralservice.UserAccountInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neutralservice.UserAccountInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neutralservice.UserAccountInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neutralservice.UserAccountInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTier();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.neutralservice.UserAccountInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.neutralservice.UserAccountInfo.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string tier = 2;
 * @return {string}
 */
proto.neutralservice.UserAccountInfo.prototype.getTier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.neutralservice.UserAccountInfo.prototype.setTier = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neutralservice.AccountRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.neutralservice.AccountRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neutralservice.AccountRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neutralservice.AccountRequest.toObject = function(includeInstance, msg) {
  var obj = {
    userid: (f = msg.getUserid()) && common_pb.UserID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neutralservice.AccountRequest}
 */
proto.neutralservice.AccountRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neutralservice.AccountRequest;
  return proto.neutralservice.AccountRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neutralservice.AccountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neutralservice.AccountRequest}
 */
proto.neutralservice.AccountRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.UserID;
      reader.readMessage(value,common_pb.UserID.deserializeBinaryFromReader);
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neutralservice.AccountRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neutralservice.AccountRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neutralservice.AccountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neutralservice.AccountRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.UserID.serializeBinaryToWriter
    );
  }
};


/**
 * optional UserID userID = 1;
 * @return {?proto.neutralservice.UserID}
 */
proto.neutralservice.AccountRequest.prototype.getUserid = function() {
  return /** @type{?proto.neutralservice.UserID} */ (
    jspb.Message.getWrapperField(this, common_pb.UserID, 1));
};


/** @param {?proto.neutralservice.UserID|undefined} value */
proto.neutralservice.AccountRequest.prototype.setUserid = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neutralservice.AccountRequest.prototype.clearUserid = function() {
  this.setUserid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neutralservice.AccountRequest.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neutralservice.SignedAccountRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.neutralservice.SignedAccountRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neutralservice.SignedAccountRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neutralservice.SignedAccountRequest.toObject = function(includeInstance, msg) {
  var obj = {
    signature: (f = msg.getSignature()) && common_pb.Signature.toObject(includeInstance, f),
    wrapped: (f = msg.getWrapped()) && proto.neutralservice.AccountRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neutralservice.SignedAccountRequest}
 */
proto.neutralservice.SignedAccountRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neutralservice.SignedAccountRequest;
  return proto.neutralservice.SignedAccountRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neutralservice.SignedAccountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neutralservice.SignedAccountRequest}
 */
proto.neutralservice.SignedAccountRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.Signature;
      reader.readMessage(value,common_pb.Signature.deserializeBinaryFromReader);
      msg.setSignature(value);
      break;
    case 2:
      var value = new proto.neutralservice.AccountRequest;
      reader.readMessage(value,proto.neutralservice.AccountRequest.deserializeBinaryFromReader);
      msg.setWrapped(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neutralservice.SignedAccountRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neutralservice.SignedAccountRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neutralservice.SignedAccountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neutralservice.SignedAccountRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignature();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.Signature.serializeBinaryToWriter
    );
  }
  f = message.getWrapped();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.neutralservice.AccountRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional Signature signature = 1;
 * @return {?proto.neutralservice.Signature}
 */
proto.neutralservice.SignedAccountRequest.prototype.getSignature = function() {
  return /** @type{?proto.neutralservice.Signature} */ (
    jspb.Message.getWrapperField(this, common_pb.Signature, 1));
};


/** @param {?proto.neutralservice.Signature|undefined} value */
proto.neutralservice.SignedAccountRequest.prototype.setSignature = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neutralservice.SignedAccountRequest.prototype.clearSignature = function() {
  this.setSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neutralservice.SignedAccountRequest.prototype.hasSignature = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AccountRequest wrapped = 2;
 * @return {?proto.neutralservice.AccountRequest}
 */
proto.neutralservice.SignedAccountRequest.prototype.getWrapped = function() {
  return /** @type{?proto.neutralservice.AccountRequest} */ (
    jspb.Message.getWrapperField(this, proto.neutralservice.AccountRequest, 2));
};


/** @param {?proto.neutralservice.AccountRequest|undefined} value */
proto.neutralservice.SignedAccountRequest.prototype.setWrapped = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neutralservice.SignedAccountRequest.prototype.clearWrapped = function() {
  this.setWrapped(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neutralservice.SignedAccountRequest.prototype.hasWrapped = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neutralservice.AccountInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.neutralservice.AccountInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neutralservice.AccountInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neutralservice.AccountInfo.toObject = function(includeInstance, msg) {
  var obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tier: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    userid: (f = msg.getUserid()) && common_pb.UserID.toObject(includeInstance, f),
    publickey: (f = msg.getPublickey()) && common_pb.Pubkey.toObject(includeInstance, f),
    bidspread: (f = msg.getBidspread()) && common_pb.Price.toObject(includeInstance, f),
    askspread: (f = msg.getAskspread()) && common_pb.Price.toObject(includeInstance, f),
    expirationblocks: jspb.Message.getFieldWithDefault(msg, 8, 0),
    expirationtime: jspb.Message.getFieldWithDefault(msg, 9, 0),
    minbidquantity: +jspb.Message.getFieldWithDefault(msg, 10, 0.0),
    maxbidquantity: +jspb.Message.getFieldWithDefault(msg, 11, 0.0),
    minaskquantity: +jspb.Message.getFieldWithDefault(msg, 12, 0.0),
    maxaskquantity: +jspb.Message.getFieldWithDefault(msg, 13, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neutralservice.AccountInfo}
 */
proto.neutralservice.AccountInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neutralservice.AccountInfo;
  return proto.neutralservice.AccountInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neutralservice.AccountInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neutralservice.AccountInfo}
 */
proto.neutralservice.AccountInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTier(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = new common_pb.UserID;
      reader.readMessage(value,common_pb.UserID.deserializeBinaryFromReader);
      msg.setUserid(value);
      break;
    case 5:
      var value = new common_pb.Pubkey;
      reader.readMessage(value,common_pb.Pubkey.deserializeBinaryFromReader);
      msg.setPublickey(value);
      break;
    case 6:
      var value = new common_pb.Price;
      reader.readMessage(value,common_pb.Price.deserializeBinaryFromReader);
      msg.setBidspread(value);
      break;
    case 7:
      var value = new common_pb.Price;
      reader.readMessage(value,common_pb.Price.deserializeBinaryFromReader);
      msg.setAskspread(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setExpirationblocks(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setExpirationtime(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinbidquantity(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxbidquantity(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinaskquantity(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxaskquantity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neutralservice.AccountInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neutralservice.AccountInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neutralservice.AccountInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neutralservice.AccountInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTier();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUserid();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      common_pb.UserID.serializeBinaryToWriter
    );
  }
  f = message.getPublickey();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      common_pb.Pubkey.serializeBinaryToWriter
    );
  }
  f = message.getBidspread();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      common_pb.Price.serializeBinaryToWriter
    );
  }
  f = message.getAskspread();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      common_pb.Price.serializeBinaryToWriter
    );
  }
  f = message.getExpirationblocks();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getExpirationtime();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getMinbidquantity();
  if (f !== 0.0) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = message.getMaxbidquantity();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = message.getMinaskquantity();
  if (f !== 0.0) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = message.getMaxaskquantity();
  if (f !== 0.0) {
    writer.writeDouble(
      13,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.neutralservice.AccountInfo.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.neutralservice.AccountInfo.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string tier = 2;
 * @return {string}
 */
proto.neutralservice.AccountInfo.prototype.getTier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.neutralservice.AccountInfo.prototype.setTier = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.neutralservice.AccountInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.neutralservice.AccountInfo.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional UserID userID = 4;
 * @return {?proto.neutralservice.UserID}
 */
proto.neutralservice.AccountInfo.prototype.getUserid = function() {
  return /** @type{?proto.neutralservice.UserID} */ (
    jspb.Message.getWrapperField(this, common_pb.UserID, 4));
};


/** @param {?proto.neutralservice.UserID|undefined} value */
proto.neutralservice.AccountInfo.prototype.setUserid = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neutralservice.AccountInfo.prototype.clearUserid = function() {
  this.setUserid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neutralservice.AccountInfo.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Pubkey publicKey = 5;
 * @return {?proto.neutralservice.Pubkey}
 */
proto.neutralservice.AccountInfo.prototype.getPublickey = function() {
  return /** @type{?proto.neutralservice.Pubkey} */ (
    jspb.Message.getWrapperField(this, common_pb.Pubkey, 5));
};


/** @param {?proto.neutralservice.Pubkey|undefined} value */
proto.neutralservice.AccountInfo.prototype.setPublickey = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neutralservice.AccountInfo.prototype.clearPublickey = function() {
  this.setPublickey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neutralservice.AccountInfo.prototype.hasPublickey = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Price bidSpread = 6;
 * @return {?proto.neutralservice.Price}
 */
proto.neutralservice.AccountInfo.prototype.getBidspread = function() {
  return /** @type{?proto.neutralservice.Price} */ (
    jspb.Message.getWrapperField(this, common_pb.Price, 6));
};


/** @param {?proto.neutralservice.Price|undefined} value */
proto.neutralservice.AccountInfo.prototype.setBidspread = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neutralservice.AccountInfo.prototype.clearBidspread = function() {
  this.setBidspread(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neutralservice.AccountInfo.prototype.hasBidspread = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Price askSpread = 7;
 * @return {?proto.neutralservice.Price}
 */
proto.neutralservice.AccountInfo.prototype.getAskspread = function() {
  return /** @type{?proto.neutralservice.Price} */ (
    jspb.Message.getWrapperField(this, common_pb.Price, 7));
};


/** @param {?proto.neutralservice.Price|undefined} value */
proto.neutralservice.AccountInfo.prototype.setAskspread = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neutralservice.AccountInfo.prototype.clearAskspread = function() {
  this.setAskspread(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neutralservice.AccountInfo.prototype.hasAskspread = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint32 expirationBlocks = 8;
 * @return {number}
 */
proto.neutralservice.AccountInfo.prototype.getExpirationblocks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.neutralservice.AccountInfo.prototype.setExpirationblocks = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint64 expirationTime = 9;
 * @return {number}
 */
proto.neutralservice.AccountInfo.prototype.getExpirationtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.neutralservice.AccountInfo.prototype.setExpirationtime = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional double minBidQuantity = 10;
 * @return {number}
 */
proto.neutralservice.AccountInfo.prototype.getMinbidquantity = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 10, 0.0));
};


/** @param {number} value */
proto.neutralservice.AccountInfo.prototype.setMinbidquantity = function(value) {
  jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional double maxBidQuantity = 11;
 * @return {number}
 */
proto.neutralservice.AccountInfo.prototype.getMaxbidquantity = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 11, 0.0));
};


/** @param {number} value */
proto.neutralservice.AccountInfo.prototype.setMaxbidquantity = function(value) {
  jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional double minAskQuantity = 12;
 * @return {number}
 */
proto.neutralservice.AccountInfo.prototype.getMinaskquantity = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 12, 0.0));
};


/** @param {number} value */
proto.neutralservice.AccountInfo.prototype.setMinaskquantity = function(value) {
  jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional double maxAskQuantity = 13;
 * @return {number}
 */
proto.neutralservice.AccountInfo.prototype.getMaxaskquantity = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 13, 0.0));
};


/** @param {number} value */
proto.neutralservice.AccountInfo.prototype.setMaxaskquantity = function(value) {
  jspb.Message.setProto3FloatField(this, 13, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neutralservice.Accounts.prototype.toObject = function(opt_includeInstance) {
  return proto.neutralservice.Accounts.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neutralservice.Accounts} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neutralservice.Accounts.toObject = function(includeInstance, msg) {
  var obj = {
    accountsMap: (f = msg.getAccountsMap()) ? f.toObject(includeInstance, proto.neutralservice.AccountInfo.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neutralservice.Accounts}
 */
proto.neutralservice.Accounts.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neutralservice.Accounts;
  return proto.neutralservice.Accounts.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neutralservice.Accounts} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neutralservice.Accounts}
 */
proto.neutralservice.Accounts.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getAccountsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.neutralservice.AccountInfo.deserializeBinaryFromReader, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neutralservice.Accounts.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neutralservice.Accounts.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neutralservice.Accounts} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neutralservice.Accounts.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.neutralservice.AccountInfo.serializeBinaryToWriter);
  }
};


/**
 * map<string, AccountInfo> accounts = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.neutralservice.AccountInfo>}
 */
proto.neutralservice.Accounts.prototype.getAccountsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.neutralservice.AccountInfo>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.neutralservice.AccountInfo));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.neutralservice.Accounts.prototype.clearAccountsMap = function() {
  this.getAccountsMap().clear();
};


goog.object.extend(exports, proto.neutralservice);
