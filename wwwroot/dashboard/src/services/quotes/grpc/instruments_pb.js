/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
goog.exportSymbol('proto.neutralservice.InstrumentDefinition', null, global);
goog.exportSymbol('proto.neutralservice.InstrumentRequest', null, global);
goog.exportSymbol('proto.neutralservice.InstrumentResponse', null, global);
goog.exportSymbol('proto.neutralservice.SignedInstrumentResponse', null, global);
goog.exportSymbol('proto.neutralservice.SymbolAtExchange', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neutralservice.SymbolAtExchange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neutralservice.SymbolAtExchange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neutralservice.SymbolAtExchange.displayName = 'proto.neutralservice.SymbolAtExchange';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neutralservice.InstrumentDefinition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.neutralservice.InstrumentDefinition.repeatedFields_, null);
};
goog.inherits(proto.neutralservice.InstrumentDefinition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neutralservice.InstrumentDefinition.displayName = 'proto.neutralservice.InstrumentDefinition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neutralservice.InstrumentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neutralservice.InstrumentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neutralservice.InstrumentRequest.displayName = 'proto.neutralservice.InstrumentRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neutralservice.InstrumentResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.neutralservice.InstrumentResponse.repeatedFields_, null);
};
goog.inherits(proto.neutralservice.InstrumentResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neutralservice.InstrumentResponse.displayName = 'proto.neutralservice.InstrumentResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neutralservice.SignedInstrumentResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neutralservice.SignedInstrumentResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neutralservice.SignedInstrumentResponse.displayName = 'proto.neutralservice.SignedInstrumentResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neutralservice.SymbolAtExchange.prototype.toObject = function(opt_includeInstance) {
  return proto.neutralservice.SymbolAtExchange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neutralservice.SymbolAtExchange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neutralservice.SymbolAtExchange.toObject = function(includeInstance, msg) {
  var obj = {
    symbol: jspb.Message.getFieldWithDefault(msg, 1, ""),
    exchange: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neutralservice.SymbolAtExchange}
 */
proto.neutralservice.SymbolAtExchange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neutralservice.SymbolAtExchange;
  return proto.neutralservice.SymbolAtExchange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neutralservice.SymbolAtExchange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neutralservice.SymbolAtExchange}
 */
proto.neutralservice.SymbolAtExchange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setExchange(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neutralservice.SymbolAtExchange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neutralservice.SymbolAtExchange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neutralservice.SymbolAtExchange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neutralservice.SymbolAtExchange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExchange();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string symbol = 1;
 * @return {string}
 */
proto.neutralservice.SymbolAtExchange.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.neutralservice.SymbolAtExchange.prototype.setSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string exchange = 2;
 * @return {string}
 */
proto.neutralservice.SymbolAtExchange.prototype.getExchange = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.neutralservice.SymbolAtExchange.prototype.setExchange = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.neutralservice.InstrumentDefinition.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neutralservice.InstrumentDefinition.prototype.toObject = function(opt_includeInstance) {
  return proto.neutralservice.InstrumentDefinition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neutralservice.InstrumentDefinition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neutralservice.InstrumentDefinition.toObject = function(includeInstance, msg) {
  var obj = {
    issuer: jspb.Message.getFieldWithDefault(msg, 1, ""),
    instrumentid: (f = msg.getInstrumentid()) && common_pb.InstrumentID.toObject(includeInstance, f),
    decimals: jspb.Message.getFieldWithDefault(msg, 3, 0),
    symbolatexchangeList: jspb.Message.toObjectList(msg.getSymbolatexchangeList(),
    proto.neutralservice.SymbolAtExchange.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neutralservice.InstrumentDefinition}
 */
proto.neutralservice.InstrumentDefinition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neutralservice.InstrumentDefinition;
  return proto.neutralservice.InstrumentDefinition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neutralservice.InstrumentDefinition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neutralservice.InstrumentDefinition}
 */
proto.neutralservice.InstrumentDefinition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIssuer(value);
      break;
    case 2:
      var value = new common_pb.InstrumentID;
      reader.readMessage(value,common_pb.InstrumentID.deserializeBinaryFromReader);
      msg.setInstrumentid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDecimals(value);
      break;
    case 4:
      var value = new proto.neutralservice.SymbolAtExchange;
      reader.readMessage(value,proto.neutralservice.SymbolAtExchange.deserializeBinaryFromReader);
      msg.addSymbolatexchange(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neutralservice.InstrumentDefinition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neutralservice.InstrumentDefinition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neutralservice.InstrumentDefinition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neutralservice.InstrumentDefinition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIssuer();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInstrumentid();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.InstrumentID.serializeBinaryToWriter
    );
  }
  f = message.getDecimals();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getSymbolatexchangeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.neutralservice.SymbolAtExchange.serializeBinaryToWriter
    );
  }
};


/**
 * optional string issuer = 1;
 * @return {string}
 */
proto.neutralservice.InstrumentDefinition.prototype.getIssuer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.neutralservice.InstrumentDefinition.prototype.setIssuer = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional InstrumentID instrumentID = 2;
 * @return {?proto.neutralservice.InstrumentID}
 */
proto.neutralservice.InstrumentDefinition.prototype.getInstrumentid = function() {
  return /** @type{?proto.neutralservice.InstrumentID} */ (
    jspb.Message.getWrapperField(this, common_pb.InstrumentID, 2));
};


/** @param {?proto.neutralservice.InstrumentID|undefined} value */
proto.neutralservice.InstrumentDefinition.prototype.setInstrumentid = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neutralservice.InstrumentDefinition.prototype.clearInstrumentid = function() {
  this.setInstrumentid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neutralservice.InstrumentDefinition.prototype.hasInstrumentid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 decimals = 3;
 * @return {number}
 */
proto.neutralservice.InstrumentDefinition.prototype.getDecimals = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.neutralservice.InstrumentDefinition.prototype.setDecimals = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated SymbolAtExchange symbolAtExchange = 4;
 * @return {!Array<!proto.neutralservice.SymbolAtExchange>}
 */
proto.neutralservice.InstrumentDefinition.prototype.getSymbolatexchangeList = function() {
  return /** @type{!Array<!proto.neutralservice.SymbolAtExchange>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.neutralservice.SymbolAtExchange, 4));
};


/** @param {!Array<!proto.neutralservice.SymbolAtExchange>} value */
proto.neutralservice.InstrumentDefinition.prototype.setSymbolatexchangeList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.neutralservice.SymbolAtExchange=} opt_value
 * @param {number=} opt_index
 * @return {!proto.neutralservice.SymbolAtExchange}
 */
proto.neutralservice.InstrumentDefinition.prototype.addSymbolatexchange = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.neutralservice.SymbolAtExchange, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.neutralservice.InstrumentDefinition.prototype.clearSymbolatexchangeList = function() {
  this.setSymbolatexchangeList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neutralservice.InstrumentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.neutralservice.InstrumentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neutralservice.InstrumentRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neutralservice.InstrumentRequest.toObject = function(includeInstance, msg) {
  var obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neutralservice.InstrumentRequest}
 */
proto.neutralservice.InstrumentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neutralservice.InstrumentRequest;
  return proto.neutralservice.InstrumentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neutralservice.InstrumentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neutralservice.InstrumentRequest}
 */
proto.neutralservice.InstrumentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neutralservice.InstrumentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neutralservice.InstrumentRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neutralservice.InstrumentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neutralservice.InstrumentRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.neutralservice.InstrumentResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neutralservice.InstrumentResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.neutralservice.InstrumentResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neutralservice.InstrumentResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neutralservice.InstrumentResponse.toObject = function(includeInstance, msg) {
  var obj = {
    instrumentdefinitionsList: jspb.Message.toObjectList(msg.getInstrumentdefinitionsList(),
    proto.neutralservice.InstrumentDefinition.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neutralservice.InstrumentResponse}
 */
proto.neutralservice.InstrumentResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neutralservice.InstrumentResponse;
  return proto.neutralservice.InstrumentResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neutralservice.InstrumentResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neutralservice.InstrumentResponse}
 */
proto.neutralservice.InstrumentResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.neutralservice.InstrumentDefinition;
      reader.readMessage(value,proto.neutralservice.InstrumentDefinition.deserializeBinaryFromReader);
      msg.addInstrumentdefinitions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neutralservice.InstrumentResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neutralservice.InstrumentResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neutralservice.InstrumentResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neutralservice.InstrumentResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstrumentdefinitionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.neutralservice.InstrumentDefinition.serializeBinaryToWriter
    );
  }
};


/**
 * repeated InstrumentDefinition instrumentDefinitions = 1;
 * @return {!Array<!proto.neutralservice.InstrumentDefinition>}
 */
proto.neutralservice.InstrumentResponse.prototype.getInstrumentdefinitionsList = function() {
  return /** @type{!Array<!proto.neutralservice.InstrumentDefinition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.neutralservice.InstrumentDefinition, 1));
};


/** @param {!Array<!proto.neutralservice.InstrumentDefinition>} value */
proto.neutralservice.InstrumentResponse.prototype.setInstrumentdefinitionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.neutralservice.InstrumentDefinition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.neutralservice.InstrumentDefinition}
 */
proto.neutralservice.InstrumentResponse.prototype.addInstrumentdefinitions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.neutralservice.InstrumentDefinition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.neutralservice.InstrumentResponse.prototype.clearInstrumentdefinitionsList = function() {
  this.setInstrumentdefinitionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neutralservice.SignedInstrumentResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.neutralservice.SignedInstrumentResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neutralservice.SignedInstrumentResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neutralservice.SignedInstrumentResponse.toObject = function(includeInstance, msg) {
  var obj = {
    signature: (f = msg.getSignature()) && common_pb.Signature.toObject(includeInstance, f),
    wrapped: (f = msg.getWrapped()) && proto.neutralservice.InstrumentResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neutralservice.SignedInstrumentResponse}
 */
proto.neutralservice.SignedInstrumentResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neutralservice.SignedInstrumentResponse;
  return proto.neutralservice.SignedInstrumentResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neutralservice.SignedInstrumentResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neutralservice.SignedInstrumentResponse}
 */
proto.neutralservice.SignedInstrumentResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.Signature;
      reader.readMessage(value,common_pb.Signature.deserializeBinaryFromReader);
      msg.setSignature(value);
      break;
    case 2:
      var value = new proto.neutralservice.InstrumentResponse;
      reader.readMessage(value,proto.neutralservice.InstrumentResponse.deserializeBinaryFromReader);
      msg.setWrapped(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neutralservice.SignedInstrumentResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neutralservice.SignedInstrumentResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neutralservice.SignedInstrumentResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neutralservice.SignedInstrumentResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignature();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.Signature.serializeBinaryToWriter
    );
  }
  f = message.getWrapped();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.neutralservice.InstrumentResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional Signature signature = 1;
 * @return {?proto.neutralservice.Signature}
 */
proto.neutralservice.SignedInstrumentResponse.prototype.getSignature = function() {
  return /** @type{?proto.neutralservice.Signature} */ (
    jspb.Message.getWrapperField(this, common_pb.Signature, 1));
};


/** @param {?proto.neutralservice.Signature|undefined} value */
proto.neutralservice.SignedInstrumentResponse.prototype.setSignature = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neutralservice.SignedInstrumentResponse.prototype.clearSignature = function() {
  this.setSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neutralservice.SignedInstrumentResponse.prototype.hasSignature = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional InstrumentResponse wrapped = 2;
 * @return {?proto.neutralservice.InstrumentResponse}
 */
proto.neutralservice.SignedInstrumentResponse.prototype.getWrapped = function() {
  return /** @type{?proto.neutralservice.InstrumentResponse} */ (
    jspb.Message.getWrapperField(this, proto.neutralservice.InstrumentResponse, 2));
};


/** @param {?proto.neutralservice.InstrumentResponse|undefined} value */
proto.neutralservice.SignedInstrumentResponse.prototype.setWrapped = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neutralservice.SignedInstrumentResponse.prototype.clearWrapped = function() {
  this.setWrapped(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neutralservice.SignedInstrumentResponse.prototype.hasWrapped = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.neutralservice);
