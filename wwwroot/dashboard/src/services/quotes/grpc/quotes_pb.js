/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
goog.exportSymbol('proto.neutralservice.BaseQuote', null, global);
goog.exportSymbol('proto.neutralservice.BaseSubQuote', null, global);
goog.exportSymbol('proto.neutralservice.CommitRequest', null, global);
goog.exportSymbol('proto.neutralservice.CommitmentRecord', null, global);
goog.exportSymbol('proto.neutralservice.FinalCommitResponse', null, global);
goog.exportSymbol('proto.neutralservice.ImmediateCommitRequest', null, global);
goog.exportSymbol('proto.neutralservice.Pair', null, global);
goog.exportSymbol('proto.neutralservice.PartialResponse', null, global);
goog.exportSymbol('proto.neutralservice.SignedBaseQuote', null, global);
goog.exportSymbol('proto.neutralservice.SignedFinalCommitResponse', null, global);
goog.exportSymbol('proto.neutralservice.SignedUserQuote', null, global);
goog.exportSymbol('proto.neutralservice.SubQuote', null, global);
goog.exportSymbol('proto.neutralservice.SubscribeRequest', null, global);
goog.exportSymbol('proto.neutralservice.UserQuote', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neutralservice.SubscribeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neutralservice.SubscribeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neutralservice.SubscribeRequest.displayName = 'proto.neutralservice.SubscribeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neutralservice.Pair = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neutralservice.Pair, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neutralservice.Pair.displayName = 'proto.neutralservice.Pair';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neutralservice.SubQuote = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neutralservice.SubQuote, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neutralservice.SubQuote.displayName = 'proto.neutralservice.SubQuote';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neutralservice.BaseSubQuote = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neutralservice.BaseSubQuote, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neutralservice.BaseSubQuote.displayName = 'proto.neutralservice.BaseSubQuote';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neutralservice.BaseQuote = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.neutralservice.BaseQuote.repeatedFields_, null);
};
goog.inherits(proto.neutralservice.BaseQuote, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neutralservice.BaseQuote.displayName = 'proto.neutralservice.BaseQuote';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neutralservice.SignedBaseQuote = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neutralservice.SignedBaseQuote, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neutralservice.SignedBaseQuote.displayName = 'proto.neutralservice.SignedBaseQuote';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neutralservice.UserQuote = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.neutralservice.UserQuote.repeatedFields_, null);
};
goog.inherits(proto.neutralservice.UserQuote, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neutralservice.UserQuote.displayName = 'proto.neutralservice.UserQuote';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neutralservice.SignedUserQuote = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neutralservice.SignedUserQuote, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neutralservice.SignedUserQuote.displayName = 'proto.neutralservice.SignedUserQuote';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neutralservice.CommitmentRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neutralservice.CommitmentRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neutralservice.CommitmentRecord.displayName = 'proto.neutralservice.CommitmentRecord';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neutralservice.CommitRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neutralservice.CommitRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neutralservice.CommitRequest.displayName = 'proto.neutralservice.CommitRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neutralservice.PartialResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.neutralservice.PartialResponse.repeatedFields_, null);
};
goog.inherits(proto.neutralservice.PartialResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neutralservice.PartialResponse.displayName = 'proto.neutralservice.PartialResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neutralservice.ImmediateCommitRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neutralservice.ImmediateCommitRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neutralservice.ImmediateCommitRequest.displayName = 'proto.neutralservice.ImmediateCommitRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neutralservice.FinalCommitResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neutralservice.FinalCommitResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neutralservice.FinalCommitResponse.displayName = 'proto.neutralservice.FinalCommitResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neutralservice.SignedFinalCommitResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neutralservice.SignedFinalCommitResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neutralservice.SignedFinalCommitResponse.displayName = 'proto.neutralservice.SignedFinalCommitResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neutralservice.SubscribeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.neutralservice.SubscribeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neutralservice.SubscribeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neutralservice.SubscribeRequest.toObject = function(includeInstance, msg) {
  var obj = {
    instrument: (f = msg.getInstrument()) && common_pb.InstrumentID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neutralservice.SubscribeRequest}
 */
proto.neutralservice.SubscribeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neutralservice.SubscribeRequest;
  return proto.neutralservice.SubscribeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neutralservice.SubscribeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neutralservice.SubscribeRequest}
 */
proto.neutralservice.SubscribeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.InstrumentID;
      reader.readMessage(value,common_pb.InstrumentID.deserializeBinaryFromReader);
      msg.setInstrument(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neutralservice.SubscribeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neutralservice.SubscribeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neutralservice.SubscribeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neutralservice.SubscribeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstrument();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.InstrumentID.serializeBinaryToWriter
    );
  }
};


/**
 * optional InstrumentID instrument = 1;
 * @return {?proto.neutralservice.InstrumentID}
 */
proto.neutralservice.SubscribeRequest.prototype.getInstrument = function() {
  return /** @type{?proto.neutralservice.InstrumentID} */ (
    jspb.Message.getWrapperField(this, common_pb.InstrumentID, 1));
};


/** @param {?proto.neutralservice.InstrumentID|undefined} value */
proto.neutralservice.SubscribeRequest.prototype.setInstrument = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neutralservice.SubscribeRequest.prototype.clearInstrument = function() {
  this.setInstrument(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neutralservice.SubscribeRequest.prototype.hasInstrument = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neutralservice.Pair.prototype.toObject = function(opt_includeInstance) {
  return proto.neutralservice.Pair.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neutralservice.Pair} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neutralservice.Pair.toObject = function(includeInstance, msg) {
  var obj = {
    basecurrency: (f = msg.getBasecurrency()) && common_pb.InstrumentID.toObject(includeInstance, f),
    quotecurrency: (f = msg.getQuotecurrency()) && common_pb.InstrumentID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neutralservice.Pair}
 */
proto.neutralservice.Pair.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neutralservice.Pair;
  return proto.neutralservice.Pair.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neutralservice.Pair} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neutralservice.Pair}
 */
proto.neutralservice.Pair.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.InstrumentID;
      reader.readMessage(value,common_pb.InstrumentID.deserializeBinaryFromReader);
      msg.setBasecurrency(value);
      break;
    case 2:
      var value = new common_pb.InstrumentID;
      reader.readMessage(value,common_pb.InstrumentID.deserializeBinaryFromReader);
      msg.setQuotecurrency(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neutralservice.Pair.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neutralservice.Pair.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neutralservice.Pair} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neutralservice.Pair.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBasecurrency();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.InstrumentID.serializeBinaryToWriter
    );
  }
  f = message.getQuotecurrency();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.InstrumentID.serializeBinaryToWriter
    );
  }
};


/**
 * optional InstrumentID baseCurrency = 1;
 * @return {?proto.neutralservice.InstrumentID}
 */
proto.neutralservice.Pair.prototype.getBasecurrency = function() {
  return /** @type{?proto.neutralservice.InstrumentID} */ (
    jspb.Message.getWrapperField(this, common_pb.InstrumentID, 1));
};


/** @param {?proto.neutralservice.InstrumentID|undefined} value */
proto.neutralservice.Pair.prototype.setBasecurrency = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neutralservice.Pair.prototype.clearBasecurrency = function() {
  this.setBasecurrency(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neutralservice.Pair.prototype.hasBasecurrency = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional InstrumentID quoteCurrency = 2;
 * @return {?proto.neutralservice.InstrumentID}
 */
proto.neutralservice.Pair.prototype.getQuotecurrency = function() {
  return /** @type{?proto.neutralservice.InstrumentID} */ (
    jspb.Message.getWrapperField(this, common_pb.InstrumentID, 2));
};


/** @param {?proto.neutralservice.InstrumentID|undefined} value */
proto.neutralservice.Pair.prototype.setQuotecurrency = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neutralservice.Pair.prototype.clearQuotecurrency = function() {
  this.setQuotecurrency(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neutralservice.Pair.prototype.hasQuotecurrency = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neutralservice.SubQuote.prototype.toObject = function(opt_includeInstance) {
  return proto.neutralservice.SubQuote.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neutralservice.SubQuote} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neutralservice.SubQuote.toObject = function(includeInstance, msg) {
  var obj = {
    pair: (f = msg.getPair()) && proto.neutralservice.Pair.toObject(includeInstance, f),
    bid: (f = msg.getBid()) && common_pb.Price.toObject(includeInstance, f),
    ask: (f = msg.getAsk()) && common_pb.Price.toObject(includeInstance, f),
    minbidquantity: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    maxbidquantity: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    minaskquantity: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    maxaskquantity: +jspb.Message.getFieldWithDefault(msg, 7, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neutralservice.SubQuote}
 */
proto.neutralservice.SubQuote.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neutralservice.SubQuote;
  return proto.neutralservice.SubQuote.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neutralservice.SubQuote} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neutralservice.SubQuote}
 */
proto.neutralservice.SubQuote.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.neutralservice.Pair;
      reader.readMessage(value,proto.neutralservice.Pair.deserializeBinaryFromReader);
      msg.setPair(value);
      break;
    case 2:
      var value = new common_pb.Price;
      reader.readMessage(value,common_pb.Price.deserializeBinaryFromReader);
      msg.setBid(value);
      break;
    case 3:
      var value = new common_pb.Price;
      reader.readMessage(value,common_pb.Price.deserializeBinaryFromReader);
      msg.setAsk(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinbidquantity(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxbidquantity(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinaskquantity(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxaskquantity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neutralservice.SubQuote.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neutralservice.SubQuote.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neutralservice.SubQuote} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neutralservice.SubQuote.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPair();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.neutralservice.Pair.serializeBinaryToWriter
    );
  }
  f = message.getBid();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Price.serializeBinaryToWriter
    );
  }
  f = message.getAsk();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      common_pb.Price.serializeBinaryToWriter
    );
  }
  f = message.getMinbidquantity();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getMaxbidquantity();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getMinaskquantity();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getMaxaskquantity();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
};


/**
 * optional Pair pair = 1;
 * @return {?proto.neutralservice.Pair}
 */
proto.neutralservice.SubQuote.prototype.getPair = function() {
  return /** @type{?proto.neutralservice.Pair} */ (
    jspb.Message.getWrapperField(this, proto.neutralservice.Pair, 1));
};


/** @param {?proto.neutralservice.Pair|undefined} value */
proto.neutralservice.SubQuote.prototype.setPair = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neutralservice.SubQuote.prototype.clearPair = function() {
  this.setPair(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neutralservice.SubQuote.prototype.hasPair = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Price bid = 2;
 * @return {?proto.neutralservice.Price}
 */
proto.neutralservice.SubQuote.prototype.getBid = function() {
  return /** @type{?proto.neutralservice.Price} */ (
    jspb.Message.getWrapperField(this, common_pb.Price, 2));
};


/** @param {?proto.neutralservice.Price|undefined} value */
proto.neutralservice.SubQuote.prototype.setBid = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neutralservice.SubQuote.prototype.clearBid = function() {
  this.setBid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neutralservice.SubQuote.prototype.hasBid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Price ask = 3;
 * @return {?proto.neutralservice.Price}
 */
proto.neutralservice.SubQuote.prototype.getAsk = function() {
  return /** @type{?proto.neutralservice.Price} */ (
    jspb.Message.getWrapperField(this, common_pb.Price, 3));
};


/** @param {?proto.neutralservice.Price|undefined} value */
proto.neutralservice.SubQuote.prototype.setAsk = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neutralservice.SubQuote.prototype.clearAsk = function() {
  this.setAsk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neutralservice.SubQuote.prototype.hasAsk = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double minBidQuantity = 4;
 * @return {number}
 */
proto.neutralservice.SubQuote.prototype.getMinbidquantity = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.neutralservice.SubQuote.prototype.setMinbidquantity = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double maxBidQuantity = 5;
 * @return {number}
 */
proto.neutralservice.SubQuote.prototype.getMaxbidquantity = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.neutralservice.SubQuote.prototype.setMaxbidquantity = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double minAskQuantity = 6;
 * @return {number}
 */
proto.neutralservice.SubQuote.prototype.getMinaskquantity = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.neutralservice.SubQuote.prototype.setMinaskquantity = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double maxAskQuantity = 7;
 * @return {number}
 */
proto.neutralservice.SubQuote.prototype.getMaxaskquantity = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.neutralservice.SubQuote.prototype.setMaxaskquantity = function(value) {
  jspb.Message.setProto3FloatField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neutralservice.BaseSubQuote.prototype.toObject = function(opt_includeInstance) {
  return proto.neutralservice.BaseSubQuote.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neutralservice.BaseSubQuote} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neutralservice.BaseSubQuote.toObject = function(includeInstance, msg) {
  var obj = {
    quote: (f = msg.getQuote()) && proto.neutralservice.SubQuote.toObject(includeInstance, f),
    nav: (f = msg.getNav()) && common_pb.Price.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neutralservice.BaseSubQuote}
 */
proto.neutralservice.BaseSubQuote.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neutralservice.BaseSubQuote;
  return proto.neutralservice.BaseSubQuote.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neutralservice.BaseSubQuote} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neutralservice.BaseSubQuote}
 */
proto.neutralservice.BaseSubQuote.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.neutralservice.SubQuote;
      reader.readMessage(value,proto.neutralservice.SubQuote.deserializeBinaryFromReader);
      msg.setQuote(value);
      break;
    case 2:
      var value = new common_pb.Price;
      reader.readMessage(value,common_pb.Price.deserializeBinaryFromReader);
      msg.setNav(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neutralservice.BaseSubQuote.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neutralservice.BaseSubQuote.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neutralservice.BaseSubQuote} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neutralservice.BaseSubQuote.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuote();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.neutralservice.SubQuote.serializeBinaryToWriter
    );
  }
  f = message.getNav();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Price.serializeBinaryToWriter
    );
  }
};


/**
 * optional SubQuote quote = 1;
 * @return {?proto.neutralservice.SubQuote}
 */
proto.neutralservice.BaseSubQuote.prototype.getQuote = function() {
  return /** @type{?proto.neutralservice.SubQuote} */ (
    jspb.Message.getWrapperField(this, proto.neutralservice.SubQuote, 1));
};


/** @param {?proto.neutralservice.SubQuote|undefined} value */
proto.neutralservice.BaseSubQuote.prototype.setQuote = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neutralservice.BaseSubQuote.prototype.clearQuote = function() {
  this.setQuote(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neutralservice.BaseSubQuote.prototype.hasQuote = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Price nav = 2;
 * @return {?proto.neutralservice.Price}
 */
proto.neutralservice.BaseSubQuote.prototype.getNav = function() {
  return /** @type{?proto.neutralservice.Price} */ (
    jspb.Message.getWrapperField(this, common_pb.Price, 2));
};


/** @param {?proto.neutralservice.Price|undefined} value */
proto.neutralservice.BaseSubQuote.prototype.setNav = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neutralservice.BaseSubQuote.prototype.clearNav = function() {
  this.setNav(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neutralservice.BaseSubQuote.prototype.hasNav = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.neutralservice.BaseQuote.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neutralservice.BaseQuote.prototype.toObject = function(opt_includeInstance) {
  return proto.neutralservice.BaseQuote.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neutralservice.BaseQuote} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neutralservice.BaseQuote.toObject = function(includeInstance, msg) {
  var obj = {
    createdat: (f = msg.getCreatedat()) && common_pb.UtcMicroTime.toObject(includeInstance, f),
    atblockno: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sessionid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    sequence: jspb.Message.getFieldWithDefault(msg, 4, 0),
    flagsList: jspb.Message.getRepeatedField(msg, 5),
    subquotesList: jspb.Message.toObjectList(msg.getSubquotesList(),
    proto.neutralservice.BaseSubQuote.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neutralservice.BaseQuote}
 */
proto.neutralservice.BaseQuote.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neutralservice.BaseQuote;
  return proto.neutralservice.BaseQuote.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neutralservice.BaseQuote} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neutralservice.BaseQuote}
 */
proto.neutralservice.BaseQuote.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.UtcMicroTime;
      reader.readMessage(value,common_pb.UtcMicroTime.deserializeBinaryFromReader);
      msg.setCreatedat(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAtblockno(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSessionid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSequence(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addFlags(value);
      break;
    case 6:
      var value = new proto.neutralservice.BaseSubQuote;
      reader.readMessage(value,proto.neutralservice.BaseSubQuote.deserializeBinaryFromReader);
      msg.addSubquotes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neutralservice.BaseQuote.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neutralservice.BaseQuote.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neutralservice.BaseQuote} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neutralservice.BaseQuote.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreatedat();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.UtcMicroTime.serializeBinaryToWriter
    );
  }
  f = message.getAtblockno();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getSessionid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getSequence();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getFlagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getSubquotesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.neutralservice.BaseSubQuote.serializeBinaryToWriter
    );
  }
};


/**
 * optional UtcMicroTime createdAt = 1;
 * @return {?proto.neutralservice.UtcMicroTime}
 */
proto.neutralservice.BaseQuote.prototype.getCreatedat = function() {
  return /** @type{?proto.neutralservice.UtcMicroTime} */ (
    jspb.Message.getWrapperField(this, common_pb.UtcMicroTime, 1));
};


/** @param {?proto.neutralservice.UtcMicroTime|undefined} value */
proto.neutralservice.BaseQuote.prototype.setCreatedat = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neutralservice.BaseQuote.prototype.clearCreatedat = function() {
  this.setCreatedat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neutralservice.BaseQuote.prototype.hasCreatedat = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 atBlockNo = 2;
 * @return {number}
 */
proto.neutralservice.BaseQuote.prototype.getAtblockno = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.neutralservice.BaseQuote.prototype.setAtblockno = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 sessionId = 3;
 * @return {number}
 */
proto.neutralservice.BaseQuote.prototype.getSessionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.neutralservice.BaseQuote.prototype.setSessionid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 sequence = 4;
 * @return {number}
 */
proto.neutralservice.BaseQuote.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.neutralservice.BaseQuote.prototype.setSequence = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated string flags = 5;
 * @return {!Array<string>}
 */
proto.neutralservice.BaseQuote.prototype.getFlagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array<string>} value */
proto.neutralservice.BaseQuote.prototype.setFlagsList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.neutralservice.BaseQuote.prototype.addFlags = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.neutralservice.BaseQuote.prototype.clearFlagsList = function() {
  this.setFlagsList([]);
};


/**
 * repeated BaseSubQuote subQuotes = 6;
 * @return {!Array<!proto.neutralservice.BaseSubQuote>}
 */
proto.neutralservice.BaseQuote.prototype.getSubquotesList = function() {
  return /** @type{!Array<!proto.neutralservice.BaseSubQuote>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.neutralservice.BaseSubQuote, 6));
};


/** @param {!Array<!proto.neutralservice.BaseSubQuote>} value */
proto.neutralservice.BaseQuote.prototype.setSubquotesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.neutralservice.BaseSubQuote=} opt_value
 * @param {number=} opt_index
 * @return {!proto.neutralservice.BaseSubQuote}
 */
proto.neutralservice.BaseQuote.prototype.addSubquotes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.neutralservice.BaseSubQuote, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.neutralservice.BaseQuote.prototype.clearSubquotesList = function() {
  this.setSubquotesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neutralservice.SignedBaseQuote.prototype.toObject = function(opt_includeInstance) {
  return proto.neutralservice.SignedBaseQuote.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neutralservice.SignedBaseQuote} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neutralservice.SignedBaseQuote.toObject = function(includeInstance, msg) {
  var obj = {
    signature: (f = msg.getSignature()) && common_pb.Signature.toObject(includeInstance, f),
    wrapped: (f = msg.getWrapped()) && proto.neutralservice.BaseQuote.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neutralservice.SignedBaseQuote}
 */
proto.neutralservice.SignedBaseQuote.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neutralservice.SignedBaseQuote;
  return proto.neutralservice.SignedBaseQuote.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neutralservice.SignedBaseQuote} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neutralservice.SignedBaseQuote}
 */
proto.neutralservice.SignedBaseQuote.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.Signature;
      reader.readMessage(value,common_pb.Signature.deserializeBinaryFromReader);
      msg.setSignature(value);
      break;
    case 2:
      var value = new proto.neutralservice.BaseQuote;
      reader.readMessage(value,proto.neutralservice.BaseQuote.deserializeBinaryFromReader);
      msg.setWrapped(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neutralservice.SignedBaseQuote.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neutralservice.SignedBaseQuote.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neutralservice.SignedBaseQuote} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neutralservice.SignedBaseQuote.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignature();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.Signature.serializeBinaryToWriter
    );
  }
  f = message.getWrapped();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.neutralservice.BaseQuote.serializeBinaryToWriter
    );
  }
};


/**
 * optional Signature signature = 1;
 * @return {?proto.neutralservice.Signature}
 */
proto.neutralservice.SignedBaseQuote.prototype.getSignature = function() {
  return /** @type{?proto.neutralservice.Signature} */ (
    jspb.Message.getWrapperField(this, common_pb.Signature, 1));
};


/** @param {?proto.neutralservice.Signature|undefined} value */
proto.neutralservice.SignedBaseQuote.prototype.setSignature = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neutralservice.SignedBaseQuote.prototype.clearSignature = function() {
  this.setSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neutralservice.SignedBaseQuote.prototype.hasSignature = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BaseQuote wrapped = 2;
 * @return {?proto.neutralservice.BaseQuote}
 */
proto.neutralservice.SignedBaseQuote.prototype.getWrapped = function() {
  return /** @type{?proto.neutralservice.BaseQuote} */ (
    jspb.Message.getWrapperField(this, proto.neutralservice.BaseQuote, 2));
};


/** @param {?proto.neutralservice.BaseQuote|undefined} value */
proto.neutralservice.SignedBaseQuote.prototype.setWrapped = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neutralservice.SignedBaseQuote.prototype.clearWrapped = function() {
  this.setWrapped(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neutralservice.SignedBaseQuote.prototype.hasWrapped = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.neutralservice.UserQuote.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neutralservice.UserQuote.prototype.toObject = function(opt_includeInstance) {
  return proto.neutralservice.UserQuote.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neutralservice.UserQuote} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neutralservice.UserQuote.toObject = function(includeInstance, msg) {
  var obj = {
    tier: jspb.Message.getFieldWithDefault(msg, 1, ""),
    signedbasequote: (f = msg.getSignedbasequote()) && proto.neutralservice.SignedBaseQuote.toObject(includeInstance, f),
    subquotesList: jspb.Message.toObjectList(msg.getSubquotesList(),
    proto.neutralservice.SubQuote.toObject, includeInstance),
    quoteid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    createdat: (f = msg.getCreatedat()) && common_pb.UtcMicroTime.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neutralservice.UserQuote}
 */
proto.neutralservice.UserQuote.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neutralservice.UserQuote;
  return proto.neutralservice.UserQuote.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neutralservice.UserQuote} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neutralservice.UserQuote}
 */
proto.neutralservice.UserQuote.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTier(value);
      break;
    case 2:
      var value = new proto.neutralservice.SignedBaseQuote;
      reader.readMessage(value,proto.neutralservice.SignedBaseQuote.deserializeBinaryFromReader);
      msg.setSignedbasequote(value);
      break;
    case 3:
      var value = new proto.neutralservice.SubQuote;
      reader.readMessage(value,proto.neutralservice.SubQuote.deserializeBinaryFromReader);
      msg.addSubquotes(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuoteid(value);
      break;
    case 5:
      var value = new common_pb.UtcMicroTime;
      reader.readMessage(value,common_pb.UtcMicroTime.deserializeBinaryFromReader);
      msg.setCreatedat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neutralservice.UserQuote.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neutralservice.UserQuote.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neutralservice.UserQuote} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neutralservice.UserQuote.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTier();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSignedbasequote();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.neutralservice.SignedBaseQuote.serializeBinaryToWriter
    );
  }
  f = message.getSubquotesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.neutralservice.SubQuote.serializeBinaryToWriter
    );
  }
  f = message.getQuoteid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCreatedat();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      common_pb.UtcMicroTime.serializeBinaryToWriter
    );
  }
};


/**
 * optional string tier = 1;
 * @return {string}
 */
proto.neutralservice.UserQuote.prototype.getTier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.neutralservice.UserQuote.prototype.setTier = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional SignedBaseQuote signedBaseQuote = 2;
 * @return {?proto.neutralservice.SignedBaseQuote}
 */
proto.neutralservice.UserQuote.prototype.getSignedbasequote = function() {
  return /** @type{?proto.neutralservice.SignedBaseQuote} */ (
    jspb.Message.getWrapperField(this, proto.neutralservice.SignedBaseQuote, 2));
};


/** @param {?proto.neutralservice.SignedBaseQuote|undefined} value */
proto.neutralservice.UserQuote.prototype.setSignedbasequote = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neutralservice.UserQuote.prototype.clearSignedbasequote = function() {
  this.setSignedbasequote(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neutralservice.UserQuote.prototype.hasSignedbasequote = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated SubQuote subQuotes = 3;
 * @return {!Array<!proto.neutralservice.SubQuote>}
 */
proto.neutralservice.UserQuote.prototype.getSubquotesList = function() {
  return /** @type{!Array<!proto.neutralservice.SubQuote>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.neutralservice.SubQuote, 3));
};


/** @param {!Array<!proto.neutralservice.SubQuote>} value */
proto.neutralservice.UserQuote.prototype.setSubquotesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.neutralservice.SubQuote=} opt_value
 * @param {number=} opt_index
 * @return {!proto.neutralservice.SubQuote}
 */
proto.neutralservice.UserQuote.prototype.addSubquotes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.neutralservice.SubQuote, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.neutralservice.UserQuote.prototype.clearSubquotesList = function() {
  this.setSubquotesList([]);
};


/**
 * optional string quoteId = 4;
 * @return {string}
 */
proto.neutralservice.UserQuote.prototype.getQuoteid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.neutralservice.UserQuote.prototype.setQuoteid = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional UtcMicroTime createdAt = 5;
 * @return {?proto.neutralservice.UtcMicroTime}
 */
proto.neutralservice.UserQuote.prototype.getCreatedat = function() {
  return /** @type{?proto.neutralservice.UtcMicroTime} */ (
    jspb.Message.getWrapperField(this, common_pb.UtcMicroTime, 5));
};


/** @param {?proto.neutralservice.UtcMicroTime|undefined} value */
proto.neutralservice.UserQuote.prototype.setCreatedat = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neutralservice.UserQuote.prototype.clearCreatedat = function() {
  this.setCreatedat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neutralservice.UserQuote.prototype.hasCreatedat = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neutralservice.SignedUserQuote.prototype.toObject = function(opt_includeInstance) {
  return proto.neutralservice.SignedUserQuote.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neutralservice.SignedUserQuote} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neutralservice.SignedUserQuote.toObject = function(includeInstance, msg) {
  var obj = {
    signature: (f = msg.getSignature()) && common_pb.Signature.toObject(includeInstance, f),
    wrapped: (f = msg.getWrapped()) && proto.neutralservice.UserQuote.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neutralservice.SignedUserQuote}
 */
proto.neutralservice.SignedUserQuote.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neutralservice.SignedUserQuote;
  return proto.neutralservice.SignedUserQuote.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neutralservice.SignedUserQuote} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neutralservice.SignedUserQuote}
 */
proto.neutralservice.SignedUserQuote.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.Signature;
      reader.readMessage(value,common_pb.Signature.deserializeBinaryFromReader);
      msg.setSignature(value);
      break;
    case 2:
      var value = new proto.neutralservice.UserQuote;
      reader.readMessage(value,proto.neutralservice.UserQuote.deserializeBinaryFromReader);
      msg.setWrapped(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neutralservice.SignedUserQuote.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neutralservice.SignedUserQuote.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neutralservice.SignedUserQuote} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neutralservice.SignedUserQuote.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignature();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.Signature.serializeBinaryToWriter
    );
  }
  f = message.getWrapped();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.neutralservice.UserQuote.serializeBinaryToWriter
    );
  }
};


/**
 * optional Signature signature = 1;
 * @return {?proto.neutralservice.Signature}
 */
proto.neutralservice.SignedUserQuote.prototype.getSignature = function() {
  return /** @type{?proto.neutralservice.Signature} */ (
    jspb.Message.getWrapperField(this, common_pb.Signature, 1));
};


/** @param {?proto.neutralservice.Signature|undefined} value */
proto.neutralservice.SignedUserQuote.prototype.setSignature = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neutralservice.SignedUserQuote.prototype.clearSignature = function() {
  this.setSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neutralservice.SignedUserQuote.prototype.hasSignature = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UserQuote wrapped = 2;
 * @return {?proto.neutralservice.UserQuote}
 */
proto.neutralservice.SignedUserQuote.prototype.getWrapped = function() {
  return /** @type{?proto.neutralservice.UserQuote} */ (
    jspb.Message.getWrapperField(this, proto.neutralservice.UserQuote, 2));
};


/** @param {?proto.neutralservice.UserQuote|undefined} value */
proto.neutralservice.SignedUserQuote.prototype.setWrapped = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neutralservice.SignedUserQuote.prototype.clearWrapped = function() {
  this.setWrapped(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neutralservice.SignedUserQuote.prototype.hasWrapped = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neutralservice.CommitmentRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.neutralservice.CommitmentRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neutralservice.CommitmentRecord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neutralservice.CommitmentRecord.toObject = function(includeInstance, msg) {
  var obj = {
    instrument: (f = msg.getInstrument()) && common_pb.InstrumentID.toObject(includeInstance, f),
    ordertype: jspb.Message.getFieldWithDefault(msg, 2, ""),
    quantity: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    quote: (f = msg.getQuote()) && proto.neutralservice.SignedUserQuote.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neutralservice.CommitmentRecord}
 */
proto.neutralservice.CommitmentRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neutralservice.CommitmentRecord;
  return proto.neutralservice.CommitmentRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neutralservice.CommitmentRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neutralservice.CommitmentRecord}
 */
proto.neutralservice.CommitmentRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.InstrumentID;
      reader.readMessage(value,common_pb.InstrumentID.deserializeBinaryFromReader);
      msg.setInstrument(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrdertype(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setQuantity(value);
      break;
    case 4:
      var value = new proto.neutralservice.SignedUserQuote;
      reader.readMessage(value,proto.neutralservice.SignedUserQuote.deserializeBinaryFromReader);
      msg.setQuote(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neutralservice.CommitmentRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neutralservice.CommitmentRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neutralservice.CommitmentRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neutralservice.CommitmentRecord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstrument();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.InstrumentID.serializeBinaryToWriter
    );
  }
  f = message.getOrdertype();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getQuantity();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getQuote();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.neutralservice.SignedUserQuote.serializeBinaryToWriter
    );
  }
};


/**
 * optional InstrumentID Instrument = 1;
 * @return {?proto.neutralservice.InstrumentID}
 */
proto.neutralservice.CommitmentRecord.prototype.getInstrument = function() {
  return /** @type{?proto.neutralservice.InstrumentID} */ (
    jspb.Message.getWrapperField(this, common_pb.InstrumentID, 1));
};


/** @param {?proto.neutralservice.InstrumentID|undefined} value */
proto.neutralservice.CommitmentRecord.prototype.setInstrument = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neutralservice.CommitmentRecord.prototype.clearInstrument = function() {
  this.setInstrument(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neutralservice.CommitmentRecord.prototype.hasInstrument = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string OrderType = 2;
 * @return {string}
 */
proto.neutralservice.CommitmentRecord.prototype.getOrdertype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.neutralservice.CommitmentRecord.prototype.setOrdertype = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional double Quantity = 3;
 * @return {number}
 */
proto.neutralservice.CommitmentRecord.prototype.getQuantity = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.neutralservice.CommitmentRecord.prototype.setQuantity = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional SignedUserQuote Quote = 4;
 * @return {?proto.neutralservice.SignedUserQuote}
 */
proto.neutralservice.CommitmentRecord.prototype.getQuote = function() {
  return /** @type{?proto.neutralservice.SignedUserQuote} */ (
    jspb.Message.getWrapperField(this, proto.neutralservice.SignedUserQuote, 4));
};


/** @param {?proto.neutralservice.SignedUserQuote|undefined} value */
proto.neutralservice.CommitmentRecord.prototype.setQuote = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neutralservice.CommitmentRecord.prototype.clearQuote = function() {
  this.setQuote(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neutralservice.CommitmentRecord.prototype.hasQuote = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neutralservice.CommitRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.neutralservice.CommitRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neutralservice.CommitRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neutralservice.CommitRequest.toObject = function(includeInstance, msg) {
  var obj = {
    commitment: (f = msg.getCommitment()) && proto.neutralservice.CommitmentRecord.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neutralservice.CommitRequest}
 */
proto.neutralservice.CommitRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neutralservice.CommitRequest;
  return proto.neutralservice.CommitRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neutralservice.CommitRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neutralservice.CommitRequest}
 */
proto.neutralservice.CommitRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.neutralservice.CommitmentRecord;
      reader.readMessage(value,proto.neutralservice.CommitmentRecord.deserializeBinaryFromReader);
      msg.setCommitment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neutralservice.CommitRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neutralservice.CommitRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neutralservice.CommitRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neutralservice.CommitRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommitment();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.neutralservice.CommitmentRecord.serializeBinaryToWriter
    );
  }
};


/**
 * optional CommitmentRecord Commitment = 1;
 * @return {?proto.neutralservice.CommitmentRecord}
 */
proto.neutralservice.CommitRequest.prototype.getCommitment = function() {
  return /** @type{?proto.neutralservice.CommitmentRecord} */ (
    jspb.Message.getWrapperField(this, proto.neutralservice.CommitmentRecord, 1));
};


/** @param {?proto.neutralservice.CommitmentRecord|undefined} value */
proto.neutralservice.CommitRequest.prototype.setCommitment = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neutralservice.CommitRequest.prototype.clearCommitment = function() {
  this.setCommitment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neutralservice.CommitRequest.prototype.hasCommitment = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.neutralservice.PartialResponse.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neutralservice.PartialResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.neutralservice.PartialResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neutralservice.PartialResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neutralservice.PartialResponse.toObject = function(includeInstance, msg) {
  var obj = {
    expiry: msg.getExpiry_asB64(),
    session: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sequence: jspb.Message.getFieldWithDefault(msg, 3, 0),
    commitmentList: jspb.Message.toObjectList(msg.getCommitmentList(),
    proto.neutralservice.CommitmentRecord.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neutralservice.PartialResponse}
 */
proto.neutralservice.PartialResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neutralservice.PartialResponse;
  return proto.neutralservice.PartialResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neutralservice.PartialResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neutralservice.PartialResponse}
 */
proto.neutralservice.PartialResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setExpiry(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSession(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSequence(value);
      break;
    case 4:
      var value = new proto.neutralservice.CommitmentRecord;
      reader.readMessage(value,proto.neutralservice.CommitmentRecord.deserializeBinaryFromReader);
      msg.addCommitment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neutralservice.PartialResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neutralservice.PartialResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neutralservice.PartialResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neutralservice.PartialResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExpiry_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSession();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getSequence();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getCommitmentList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.neutralservice.CommitmentRecord.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes Expiry = 1;
 * @return {string}
 */
proto.neutralservice.PartialResponse.prototype.getExpiry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes Expiry = 1;
 * This is a type-conversion wrapper around `getExpiry()`
 * @return {string}
 */
proto.neutralservice.PartialResponse.prototype.getExpiry_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getExpiry()));
};


/**
 * optional bytes Expiry = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExpiry()`
 * @return {!Uint8Array}
 */
proto.neutralservice.PartialResponse.prototype.getExpiry_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getExpiry()));
};


/** @param {!(string|Uint8Array)} value */
proto.neutralservice.PartialResponse.prototype.setExpiry = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint32 Session = 2;
 * @return {number}
 */
proto.neutralservice.PartialResponse.prototype.getSession = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.neutralservice.PartialResponse.prototype.setSession = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 Sequence = 3;
 * @return {number}
 */
proto.neutralservice.PartialResponse.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.neutralservice.PartialResponse.prototype.setSequence = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated CommitmentRecord Commitment = 4;
 * @return {!Array<!proto.neutralservice.CommitmentRecord>}
 */
proto.neutralservice.PartialResponse.prototype.getCommitmentList = function() {
  return /** @type{!Array<!proto.neutralservice.CommitmentRecord>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.neutralservice.CommitmentRecord, 4));
};


/** @param {!Array<!proto.neutralservice.CommitmentRecord>} value */
proto.neutralservice.PartialResponse.prototype.setCommitmentList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.neutralservice.CommitmentRecord=} opt_value
 * @param {number=} opt_index
 * @return {!proto.neutralservice.CommitmentRecord}
 */
proto.neutralservice.PartialResponse.prototype.addCommitment = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.neutralservice.CommitmentRecord, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.neutralservice.PartialResponse.prototype.clearCommitmentList = function() {
  this.setCommitmentList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neutralservice.ImmediateCommitRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.neutralservice.ImmediateCommitRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neutralservice.ImmediateCommitRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neutralservice.ImmediateCommitRequest.toObject = function(includeInstance, msg) {
  var obj = {
    sourceaccount: (f = msg.getSourceaccount()) && common_pb.Address.toObject(includeInstance, f),
    destinationaccount: (f = msg.getDestinationaccount()) && common_pb.Address.toObject(includeInstance, f),
    commitment: (f = msg.getCommitment()) && proto.neutralservice.CommitmentRecord.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neutralservice.ImmediateCommitRequest}
 */
proto.neutralservice.ImmediateCommitRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neutralservice.ImmediateCommitRequest;
  return proto.neutralservice.ImmediateCommitRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neutralservice.ImmediateCommitRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neutralservice.ImmediateCommitRequest}
 */
proto.neutralservice.ImmediateCommitRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.Address;
      reader.readMessage(value,common_pb.Address.deserializeBinaryFromReader);
      msg.setSourceaccount(value);
      break;
    case 2:
      var value = new common_pb.Address;
      reader.readMessage(value,common_pb.Address.deserializeBinaryFromReader);
      msg.setDestinationaccount(value);
      break;
    case 3:
      var value = new proto.neutralservice.CommitmentRecord;
      reader.readMessage(value,proto.neutralservice.CommitmentRecord.deserializeBinaryFromReader);
      msg.setCommitment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neutralservice.ImmediateCommitRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neutralservice.ImmediateCommitRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neutralservice.ImmediateCommitRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neutralservice.ImmediateCommitRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourceaccount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.Address.serializeBinaryToWriter
    );
  }
  f = message.getDestinationaccount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Address.serializeBinaryToWriter
    );
  }
  f = message.getCommitment();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.neutralservice.CommitmentRecord.serializeBinaryToWriter
    );
  }
};


/**
 * optional Address SourceAccount = 1;
 * @return {?proto.neutralservice.Address}
 */
proto.neutralservice.ImmediateCommitRequest.prototype.getSourceaccount = function() {
  return /** @type{?proto.neutralservice.Address} */ (
    jspb.Message.getWrapperField(this, common_pb.Address, 1));
};


/** @param {?proto.neutralservice.Address|undefined} value */
proto.neutralservice.ImmediateCommitRequest.prototype.setSourceaccount = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neutralservice.ImmediateCommitRequest.prototype.clearSourceaccount = function() {
  this.setSourceaccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neutralservice.ImmediateCommitRequest.prototype.hasSourceaccount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Address DestinationAccount = 2;
 * @return {?proto.neutralservice.Address}
 */
proto.neutralservice.ImmediateCommitRequest.prototype.getDestinationaccount = function() {
  return /** @type{?proto.neutralservice.Address} */ (
    jspb.Message.getWrapperField(this, common_pb.Address, 2));
};


/** @param {?proto.neutralservice.Address|undefined} value */
proto.neutralservice.ImmediateCommitRequest.prototype.setDestinationaccount = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neutralservice.ImmediateCommitRequest.prototype.clearDestinationaccount = function() {
  this.setDestinationaccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neutralservice.ImmediateCommitRequest.prototype.hasDestinationaccount = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CommitmentRecord Commitment = 3;
 * @return {?proto.neutralservice.CommitmentRecord}
 */
proto.neutralservice.ImmediateCommitRequest.prototype.getCommitment = function() {
  return /** @type{?proto.neutralservice.CommitmentRecord} */ (
    jspb.Message.getWrapperField(this, proto.neutralservice.CommitmentRecord, 3));
};


/** @param {?proto.neutralservice.CommitmentRecord|undefined} value */
proto.neutralservice.ImmediateCommitRequest.prototype.setCommitment = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neutralservice.ImmediateCommitRequest.prototype.clearCommitment = function() {
  this.setCommitment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neutralservice.ImmediateCommitRequest.prototype.hasCommitment = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neutralservice.FinalCommitResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.neutralservice.FinalCommitResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neutralservice.FinalCommitResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neutralservice.FinalCommitResponse.toObject = function(includeInstance, msg) {
  var obj = {
    signature: (f = msg.getSignature()) && common_pb.Signature.toObject(includeInstance, f),
    nonce: msg.getNonce_asB64(),
    feedestination: jspb.Message.getFieldWithDefault(msg, 3, ""),
    expirationdate: msg.getExpirationdate_asB64(),
    expirationblock: msg.getExpirationblock_asB64(),
    source: jspb.Message.getFieldWithDefault(msg, 6, ""),
    destination: jspb.Message.getFieldWithDefault(msg, 7, ""),
    instrument: jspb.Message.getFieldWithDefault(msg, 8, ""),
    instrumentquantity: msg.getInstrumentquantity_asB64(),
    instrumentoperation: jspb.Message.getFieldWithDefault(msg, 10, 0),
    neutralquantity: msg.getNeutralquantity_asB64(),
    fee: msg.getFee_asB64(),
    neutralboundary: msg.getNeutralboundary_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neutralservice.FinalCommitResponse}
 */
proto.neutralservice.FinalCommitResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neutralservice.FinalCommitResponse;
  return proto.neutralservice.FinalCommitResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neutralservice.FinalCommitResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neutralservice.FinalCommitResponse}
 */
proto.neutralservice.FinalCommitResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.Signature;
      reader.readMessage(value,common_pb.Signature.deserializeBinaryFromReader);
      msg.setSignature(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNonce(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeedestination(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setExpirationdate(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setExpirationblock(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestination(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setInstrument(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setInstrumentquantity(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInstrumentoperation(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNeutralquantity(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFee(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNeutralboundary(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neutralservice.FinalCommitResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neutralservice.FinalCommitResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neutralservice.FinalCommitResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neutralservice.FinalCommitResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignature();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.Signature.serializeBinaryToWriter
    );
  }
  f = message.getNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getFeedestination();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getExpirationdate_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getExpirationblock_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getDestination();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getInstrument();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getInstrumentquantity_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getInstrumentoperation();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = message.getNeutralquantity_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
  f = message.getFee_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      12,
      f
    );
  }
  f = message.getNeutralboundary_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      13,
      f
    );
  }
};


/**
 * optional Signature Signature = 1;
 * @return {?proto.neutralservice.Signature}
 */
proto.neutralservice.FinalCommitResponse.prototype.getSignature = function() {
  return /** @type{?proto.neutralservice.Signature} */ (
    jspb.Message.getWrapperField(this, common_pb.Signature, 1));
};


/** @param {?proto.neutralservice.Signature|undefined} value */
proto.neutralservice.FinalCommitResponse.prototype.setSignature = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neutralservice.FinalCommitResponse.prototype.clearSignature = function() {
  this.setSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neutralservice.FinalCommitResponse.prototype.hasSignature = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes _nonce = 2;
 * @return {string}
 */
proto.neutralservice.FinalCommitResponse.prototype.getNonce = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes _nonce = 2;
 * This is a type-conversion wrapper around `getNonce()`
 * @return {string}
 */
proto.neutralservice.FinalCommitResponse.prototype.getNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNonce()));
};


/**
 * optional bytes _nonce = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNonce()`
 * @return {!Uint8Array}
 */
proto.neutralservice.FinalCommitResponse.prototype.getNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNonce()));
};


/** @param {!(string|Uint8Array)} value */
proto.neutralservice.FinalCommitResponse.prototype.setNonce = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string _feeDestination = 3;
 * @return {string}
 */
proto.neutralservice.FinalCommitResponse.prototype.getFeedestination = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.neutralservice.FinalCommitResponse.prototype.setFeedestination = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bytes _expirationDate = 4;
 * @return {string}
 */
proto.neutralservice.FinalCommitResponse.prototype.getExpirationdate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes _expirationDate = 4;
 * This is a type-conversion wrapper around `getExpirationdate()`
 * @return {string}
 */
proto.neutralservice.FinalCommitResponse.prototype.getExpirationdate_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getExpirationdate()));
};


/**
 * optional bytes _expirationDate = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExpirationdate()`
 * @return {!Uint8Array}
 */
proto.neutralservice.FinalCommitResponse.prototype.getExpirationdate_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getExpirationdate()));
};


/** @param {!(string|Uint8Array)} value */
proto.neutralservice.FinalCommitResponse.prototype.setExpirationdate = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes _expirationBlock = 5;
 * @return {string}
 */
proto.neutralservice.FinalCommitResponse.prototype.getExpirationblock = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes _expirationBlock = 5;
 * This is a type-conversion wrapper around `getExpirationblock()`
 * @return {string}
 */
proto.neutralservice.FinalCommitResponse.prototype.getExpirationblock_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getExpirationblock()));
};


/**
 * optional bytes _expirationBlock = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExpirationblock()`
 * @return {!Uint8Array}
 */
proto.neutralservice.FinalCommitResponse.prototype.getExpirationblock_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getExpirationblock()));
};


/** @param {!(string|Uint8Array)} value */
proto.neutralservice.FinalCommitResponse.prototype.setExpirationblock = function(value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional string _source = 6;
 * @return {string}
 */
proto.neutralservice.FinalCommitResponse.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.neutralservice.FinalCommitResponse.prototype.setSource = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string _destination = 7;
 * @return {string}
 */
proto.neutralservice.FinalCommitResponse.prototype.getDestination = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.neutralservice.FinalCommitResponse.prototype.setDestination = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string _instrument = 8;
 * @return {string}
 */
proto.neutralservice.FinalCommitResponse.prototype.getInstrument = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.neutralservice.FinalCommitResponse.prototype.setInstrument = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional bytes _instrumentQuantity = 9;
 * @return {string}
 */
proto.neutralservice.FinalCommitResponse.prototype.getInstrumentquantity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes _instrumentQuantity = 9;
 * This is a type-conversion wrapper around `getInstrumentquantity()`
 * @return {string}
 */
proto.neutralservice.FinalCommitResponse.prototype.getInstrumentquantity_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getInstrumentquantity()));
};


/**
 * optional bytes _instrumentQuantity = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInstrumentquantity()`
 * @return {!Uint8Array}
 */
proto.neutralservice.FinalCommitResponse.prototype.getInstrumentquantity_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getInstrumentquantity()));
};


/** @param {!(string|Uint8Array)} value */
proto.neutralservice.FinalCommitResponse.prototype.setInstrumentquantity = function(value) {
  jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * optional uint32 _instrumentOperation = 10;
 * @return {number}
 */
proto.neutralservice.FinalCommitResponse.prototype.getInstrumentoperation = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.neutralservice.FinalCommitResponse.prototype.setInstrumentoperation = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional bytes _neutralQuantity = 11;
 * @return {string}
 */
proto.neutralservice.FinalCommitResponse.prototype.getNeutralquantity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes _neutralQuantity = 11;
 * This is a type-conversion wrapper around `getNeutralquantity()`
 * @return {string}
 */
proto.neutralservice.FinalCommitResponse.prototype.getNeutralquantity_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNeutralquantity()));
};


/**
 * optional bytes _neutralQuantity = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNeutralquantity()`
 * @return {!Uint8Array}
 */
proto.neutralservice.FinalCommitResponse.prototype.getNeutralquantity_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNeutralquantity()));
};


/** @param {!(string|Uint8Array)} value */
proto.neutralservice.FinalCommitResponse.prototype.setNeutralquantity = function(value) {
  jspb.Message.setProto3BytesField(this, 11, value);
};


/**
 * optional bytes _fee = 12;
 * @return {string}
 */
proto.neutralservice.FinalCommitResponse.prototype.getFee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * optional bytes _fee = 12;
 * This is a type-conversion wrapper around `getFee()`
 * @return {string}
 */
proto.neutralservice.FinalCommitResponse.prototype.getFee_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFee()));
};


/**
 * optional bytes _fee = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFee()`
 * @return {!Uint8Array}
 */
proto.neutralservice.FinalCommitResponse.prototype.getFee_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFee()));
};


/** @param {!(string|Uint8Array)} value */
proto.neutralservice.FinalCommitResponse.prototype.setFee = function(value) {
  jspb.Message.setProto3BytesField(this, 12, value);
};


/**
 * optional bytes _neutralBoundary = 13;
 * @return {string}
 */
proto.neutralservice.FinalCommitResponse.prototype.getNeutralboundary = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * optional bytes _neutralBoundary = 13;
 * This is a type-conversion wrapper around `getNeutralboundary()`
 * @return {string}
 */
proto.neutralservice.FinalCommitResponse.prototype.getNeutralboundary_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNeutralboundary()));
};


/**
 * optional bytes _neutralBoundary = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNeutralboundary()`
 * @return {!Uint8Array}
 */
proto.neutralservice.FinalCommitResponse.prototype.getNeutralboundary_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNeutralboundary()));
};


/** @param {!(string|Uint8Array)} value */
proto.neutralservice.FinalCommitResponse.prototype.setNeutralboundary = function(value) {
  jspb.Message.setProto3BytesField(this, 13, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neutralservice.SignedFinalCommitResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.neutralservice.SignedFinalCommitResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neutralservice.SignedFinalCommitResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neutralservice.SignedFinalCommitResponse.toObject = function(includeInstance, msg) {
  var obj = {
    signature: (f = msg.getSignature()) && common_pb.Signature.toObject(includeInstance, f),
    wrapped: (f = msg.getWrapped()) && proto.neutralservice.FinalCommitResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neutralservice.SignedFinalCommitResponse}
 */
proto.neutralservice.SignedFinalCommitResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neutralservice.SignedFinalCommitResponse;
  return proto.neutralservice.SignedFinalCommitResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neutralservice.SignedFinalCommitResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neutralservice.SignedFinalCommitResponse}
 */
proto.neutralservice.SignedFinalCommitResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.Signature;
      reader.readMessage(value,common_pb.Signature.deserializeBinaryFromReader);
      msg.setSignature(value);
      break;
    case 2:
      var value = new proto.neutralservice.FinalCommitResponse;
      reader.readMessage(value,proto.neutralservice.FinalCommitResponse.deserializeBinaryFromReader);
      msg.setWrapped(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neutralservice.SignedFinalCommitResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neutralservice.SignedFinalCommitResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neutralservice.SignedFinalCommitResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neutralservice.SignedFinalCommitResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignature();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.Signature.serializeBinaryToWriter
    );
  }
  f = message.getWrapped();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.neutralservice.FinalCommitResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional Signature signature = 1;
 * @return {?proto.neutralservice.Signature}
 */
proto.neutralservice.SignedFinalCommitResponse.prototype.getSignature = function() {
  return /** @type{?proto.neutralservice.Signature} */ (
    jspb.Message.getWrapperField(this, common_pb.Signature, 1));
};


/** @param {?proto.neutralservice.Signature|undefined} value */
proto.neutralservice.SignedFinalCommitResponse.prototype.setSignature = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neutralservice.SignedFinalCommitResponse.prototype.clearSignature = function() {
  this.setSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neutralservice.SignedFinalCommitResponse.prototype.hasSignature = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional FinalCommitResponse wrapped = 2;
 * @return {?proto.neutralservice.FinalCommitResponse}
 */
proto.neutralservice.SignedFinalCommitResponse.prototype.getWrapped = function() {
  return /** @type{?proto.neutralservice.FinalCommitResponse} */ (
    jspb.Message.getWrapperField(this, proto.neutralservice.FinalCommitResponse, 2));
};


/** @param {?proto.neutralservice.FinalCommitResponse|undefined} value */
proto.neutralservice.SignedFinalCommitResponse.prototype.setWrapped = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.neutralservice.SignedFinalCommitResponse.prototype.clearWrapped = function() {
  this.setWrapped(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neutralservice.SignedFinalCommitResponse.prototype.hasWrapped = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.neutralservice);
